style.

	.remoteOverlay {
		position: fixed;
		top: 0;
		left: 0;
		z-index: 100;
		width: 100%;
		height: 100%;
		background-color: #131313;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;
	}

	.controlbar {
		display: flex;
		flex-direction: row;
	}

	.moveButton {
		font-size: 50;
	}

	.moveOverlay {
		background-color: transparent;
	}

	input[type="time"] {
		font-size: 100;
		background: none;
		border: 1px solid #19f0b4;
	}

	button {
		font-size: 75;
		color: #19f0b4;
		border: none;
		background: none;
		padding: 50px;
	}

	button.big {
		font-size: 125;
	}

	h1 {
		color: #19f0b4;
		font-size: 100;
	}

video(id='player' controls autoplay)
.remoteOverlay.moveOverlay
	h1 Moving
	button(onclick='finishMove();') Set Position
.remoteOverlay.soundcloud
	h1 Soundcloud
	.controlbar
		button(onclick='sendCommand("soundcloud", "prev");') ◀◀
		button.big(onclick='sendCommand("soundcloud", "play/pause");') ▶/❚❚
		button(onclick='sendCommand("soundcloud", "next");') ▶▶
	button.moveButton(onclick='move()') Move Totem
.remoteOverlay.youtube
	h1 Youtube
	.controlbar
		button.big(onclick='sendCommand("youtube", "play/pause");') ▶/❚❚
	button.moveButton(onclick='move()') Move Totem
.remoteOverlay.alarm
	h1 Alarm
	input(id="alarmInput" type="time")
	button(onclick='sendCommand("alarm", "setAlarm:" + $("#alarmInput").val() )') set alarm
	button.moveButton(onclick='move()') Move Totem
script(src="/socket.io/socket.io.js")
script(src="https://code.jquery.com/jquery-3.1.1.min.js")
canvas(id="canvas" width="768" height="1024")
script.
	const player = document.getElementById('player');

	const socket_namespace = '/index';

	var socket = io.connect(socket_namespace, {secure: true});

	var canvas = document.getElementById('canvas');

	function sendCommand (target, command) {
		socket.emit('initiateCommand', { target, command });
	}

	var activeTotem = null;
	var moving = null; // the totem we are moving

	socket.on('activeTotem', (totem) => {
		$('.remoteOverlay').hide();
		activeTotem = null;

		if (moving) {
			$('.moveOverlay').show();
			return; // don't show any overlays if we are moving a totem
		}

		if (totem && totem.target) {
			activeTotem = totem;
			$('.remoteOverlay.'+totem.target).show();
		}
	});

	function move() {
		moving = activeTotem;
		$('.moveOverlay').show();
	}

	function finishMove() {
		socket.emit('movedTotem', moving);
		moving = null;
		$('.moveOverlay').hide();
	}

	$('.moveOverlay').hide(); // start hidden

	navigator.mediaDevices.enumerateDevices().then(function (devices) {
		var cameraDevices = devices.filter(device => device.kind == 'videoinput');
		var backCameraRegex = /back|rear/; // regex to find the back camera based on its label
		var backCamera = cameraDevices.filter(device => backCameraRegex.test(device.label.toLowerCase()))[0];

		socket.emit('cameraDevices', backCamera);

		const constraints = {
			width: 1024,
			height: 768,
		};

		var  dataUrlToBlob = dataUrl => dataUrl.split(',')[1];

		function startStream () {
			var track;
			var imageCapture;
			navigator.mediaDevices.getUserMedia({ video: {deviceId: {exact: backCamera.deviceId} } })
				.then((stream) => {
					player.srcObject = stream;
					track = stream.getVideoTracks()[0];
					return track.applyConstraints(constraints)
				})
				.then(() => {
					imageCapture = new ImageCapture(track);
					socket.on('takeCapture', function () {
						console.log('takeCapture');
						imageCapture.grabFrame().then(bitmap => {
							canvas.getContext('2d').drawImage(bitmap, 0, 0);
							socket.emit('captured', dataUrlToBlob(canvas.toDataURL('image/jpeg')));
						});
					});
				});
		}

		startStream();
	});
