style.
	button {
		font-size: 100;
	}

	.remoteOverlay {
		position: fixed;
		top: 0;
		left: 0;
		z-index: 100;
	}

video(id='player' controls autoplay)
.remoteOverlay.soundcloud
	h1 Soundcloud
	button(onclick='sendCommand("soundcloud", "play/pause");') play/pause
	button(onclick='sendCommand("soundcloud", "next");') next
	button(onclick='sendCommand("soundcloud", "prev");') prev
script(src="/socket.io/socket.io.js")
script(src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js")
script(src="https://code.jquery.com/jquery-3.1.1.min.js")
canvas(id="canvas" width="768" height="1024")
script.
	const player = document.getElementById('player');

	const socket_namespace = '/index';

	var socket = io.connect(socket_namespace, {secure: true});

	var canvas = document.getElementById('canvas');

	function sendCommand (target, command) {
		socket.emit('initiateCommand', { target, command });
	}

	socket.on('activeTotem', (totem) => {
		$('.remoteOverlay').hide();

		if (totem && totem.target) {
			$('.remoteOverlay.'+totem.target).show();
		}
	});

	navigator.mediaDevices.enumerateDevices().then(function (devices) {
		var cameraDevices = devices.filter(device => device.kind == 'videoinput');
		var backCameraRegex = /back|rear/; // regex to find the back camera based on its label
		var backCamera = cameraDevices.filter(device => backCameraRegex.test(device.label.toLowerCase()))[0];

		socket.emit('cameraDevices', backCamera);

		const constraints = {
			width: 1024,
			height: 768,
		};

		var  dataUrlToBlob = dataUrl => dataUrl.split(',')[1];

		function startStream () {
			var track;
			var imageCapture;
			navigator.mediaDevices.getUserMedia({ video: {deviceId: {exact: backCamera.deviceId} } })
				.then((stream) => {
					player.srcObject = stream;
					track = stream.getVideoTracks()[0];
					return track.applyConstraints(constraints)
				})
				.then(() => {
					imageCapture = new ImageCapture(track);
					socket.on('takeCapture', function () {
						console.log('takeCapture');
						imageCapture.grabFrame().then(bitmap => {
							canvas.getContext('2d').drawImage(bitmap, 0, 0);
							socket.emit('captured', dataUrlToBlob(canvas.toDataURL('image/jpeg')));
						});
					});
				});
		}

		startStream();
	});
